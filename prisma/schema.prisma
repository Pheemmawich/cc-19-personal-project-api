// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id           Int        @id @default(autoincrement())
  firstname    String
  lastname     String
  email        String?    @unique
  phoneNumber  String?    @unique
  password     String
  profileImage String?
  coverImage   String?
  createdAt    DateTime   @default(now()) @db.Timestamp(0)
  updatedAt    DateTime   @updatedAt @db.Timestamp(0)
  deletedAt    DateTime?
  //ได้ข้อมูลออกมาเป็น YYYY-MM-DD hr:min:sec
  role         Role       @default(USER)
  recipes      Recipe[]
  comments     Comment[]
  likes        Like[]
  favorites    Favorite[]
}

model Recipe {
  id          Int        @id @default(autoincrement())
  name        String
  foodImage   String
  description String?    @db.VarChar(255)
  method      String     @db.Text
  ingredient  String     @db.Text
  createdAt   DateTime   @default(now()) @db.Timestamp(0)
  updatedAt   DateTime   @updatedAt @db.Timestamp(0)
  deletedAt   DateTime?
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  comments    Comment[]
  likes       Like[]
  favorites   Favorite[]
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  Int
}

model Comment {
  id        Int       @id @default(autoincrement())
  message   String    @db.Text
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @updatedAt @db.Timestamp(0)
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  recipe    Recipe    @relation(fields: [menuId], references: [id])
  menuId    Int
}

model Like {
  createdAt DateTime @default(now()) @db.Timestamp(0)
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  recipeId  Int

  @@id([userId, recipeId])
}

model Favorite {
  userId    Int
  createdAt DateTime @default(now()) @db.Timestamp(0)
  user      User     @relation(fields: [userId], references: [id])
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  recipeId  Int

  @@id([userId, recipeId])
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  recipes Recipe[]
}
 